export const alternatingPositionCipherChallenge = {
    title: "Alternating Position Cipher",
    description: `You are given a string s and an integer key. Transform the string by shifting each alphabetical character (a-z, A-Z) based on its 1-based position in the string:
    
    - For odd positions (1, 3, 5, ...), shift the character forward in the alphabet by key positions.
    - For even positions (2, 4, 6, ...), shift the character backward in the alphabet by key positions.
    
    Non-alphabetical characters remain unchanged. Shifts wrap around the alphabet (e.g., 'z' shifted forward by 1 becomes 'a'), and the case of letters is preserved.
    
    **Input:**
    - The first line contains the string s (1 ≤ |s| ≤ 10^4), consisting of printable ASCII characters.
    - The second line contains the integer key (0 ≤ key ≤ 25).
    
    **Output:**
    - A single line containing the transformed string.`,

    defaultCode: `function main() {
    // Read the input values
    const s = readline().trim();
    const key = parseInt(readline().trim());
    // Your code here
}`,

    testCases: generateTestCases(4),  // Generate 4 random test cases dynamically

    difficulty: "Medium",
    categories: ["String Manipulation", "Conditionals", "Math"],
    language_id: 63,
};

// Function to generate random test cases
function generateTestCases(numCases) {
    const testCases = [];
    for (let i = 0; i < numCases; i++) {
        const { s, key, expected } = generateRandomTestCase();
        testCases.push({
            input: s + "\n" + key + "\n",
            expected_output: expected + "\n"
        });
    }
    return testCases;
}

// Function to generate a single random test case
function generateRandomTestCase() {
    const length = Math.floor(Math.random() * 20) + 1;  // Random length between 1 and 20 for simplicity
    const s = generateRandomString(length);
    const key = Math.floor(Math.random() * 26);  // Random key between 0 and 25
    const expected = alternatingPositionCipher(s, key);
    return { s, key, expected };
}

// Function to generate a random string of given length
function generateRandomString(length) {
    const chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*() ";
    let result = '';
    for (let i = 0; i < length; i++) {
        const randomIndex = Math.floor(Math.random() * chars.length);
        result += chars[randomIndex];
    }
    return result;
}

// Function to compute the transformed string
function alternatingPositionCipher(s, key) {
    let result = '';
    for (let j = 0; j < s.length; j++) {
        const char = s[j];
        const position = j + 1;  // 1-based position
        if (/[a-zA-Z]/.test(char)) {
            const isUpperCase = char === char.toUpperCase();
            const base = isUpperCase ? 65 : 97;  // ASCII base for A or a
            const charCode = char.charCodeAt(0) - base;
            let newCharCode;
            if (position % 2 === 1) {
                newCharCode = (charCode + key) % 26;  // Forward shift for odd positions
            } else {
                newCharCode = (charCode - key + 26) % 26;  // Backward shift for even positions
            }
            const newChar = String.fromCharCode(base + newCharCode);
            result += newChar;
        } else {
            result += char;  // Non-alphabetical characters unchanged
        }
    }
    return result;
}